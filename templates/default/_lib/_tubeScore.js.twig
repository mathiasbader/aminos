{% set minScore = 4 %}

{% if run.group == 'notPolar' or run.group == 'polarCharged' or run.group == 'all' %}
    {% if run.scoreBefore is null or run.scoreBefore.baseScores is null %}
        {% set scoreBefore1 = 0 %}
        {% set scoreBefore2 = 0 %}
        {% set scoreBefore3 = 0 %}
        {% set scoreBefore4 = 0 %}
    {% else %}
        {% if run.group == 'all' %}
            {% set scoreBefore1 = run.scoreBefore.baseScores.nonPolar1 %}
            {% set scoreBefore2 = run.scoreBefore.baseScores.nonPolar2 %}
            {% set scoreBefore3 = run.scoreBefore.baseScores.polar     %}
            {% set scoreBefore4 = run.scoreBefore.baseScores.charged   %}
        {% elseif run.group == 'notPolar' %}
            {% set scoreBefore1 = run.scoreBefore.baseScores.nonPolar1 %}
            {% set scoreBefore2 = run.scoreBefore.baseScores.nonPolar2 %}
        {% else %}
            {% set scoreBefore1 = run.scoreBefore.baseScores.polar   %}
            {% set scoreBefore2 = run.scoreBefore.baseScores.charged %}
        {% endif %}
    {% endif %}
    {% if run.group == 'all' %}
        let scoresFrom = [{{ scoreBefore1 }}, {{ scoreBefore2 }},
                          {{ scoreBefore3 }}, {{ scoreBefore4 }}];
        let scoresTo = [{{ run.baseScores.nonPolar1 }}, {{ run.baseScores.nonPolar2 }},
                        {{ run.baseScores.polar     }}, {{ run.baseScores.charged   }}]
    {% elseif run.group == 'notPolar' or run.group == 'polarCharged' %}
        let scoresFrom = [{{ scoreBefore1 }}, {{ scoreBefore2 }}];
        {% if run.group == 'notPolar' %}
            let scoresTo = [{{ run.baseScores.nonPolar1 }}, {{ run.baseScores.nonPolar2 }}]
        {% else %}
            let scoresTo = [{{ run.baseScores.polar }}, {{ run.baseScores.charged }}]
        {% endif %}
    {% endif %}
{% endif %}
{% if run.scoreBefore is null or
    run.scoreBefore.score is null %} {% set scoreBefore = 0 %}
{% else %}                           {% set scoreBefore = run.scoreBefore.score %} {% endif %}
let scoreFrom = {{ scoreBefore }};
let scoreTo   = {{ run.score }};

let animationDelayInMs = 1000;
let animationDelayInMsForReflex = 400;
let animationStep = 0;
let animationLength = 0;
let minScore = {{ minScore }};

function startAnimation() {
    {% if run.group == 'all' %}
        {% if run.baseScores.nonPolar1 > minScore and
              run.baseScores.nonPolar1 > scoreBefore1 %} showElementsOfTube('-1'); {% endif %}
        {% if run.baseScores.nonPolar2 > minScore and
              run.baseScores.nonPolar2 > scoreBefore2 %} showElementsOfTube('-2'); {% endif %}
        {% if run.baseScores.polar > minScore and
              run.baseScores.polar > scoreBefore3 %} showElementsOfTube('-3'); {% endif %}
        {% if run.baseScores.charged > minScore and
              run.baseScores.charged > scoreBefore4 %} showElementsOfTube('-4'); {% endif %}
    {% elseif run.group == 'notPolar' %}
        {% if run.baseScores.nonPolar1 > minScore and
              run.baseScores.nonPolar1 > scoreBefore1 %} showElementsOfTube('-1'); {% endif %}
        {% if run.baseScores.nonPolar2 > minScore and
              run.baseScores.nonPolar2 > scoreBefore2 %} showElementsOfTube('-2'); {% endif %}
    {% elseif run.group == 'polarCharged' %}
        {% if run.baseScores.polar > minScore and
              run.baseScores.polar > scoreBefore1 %} showElementsOfTube('-1'); {% endif %}
        {% if run.baseScores.charged > minScore and
              run.baseScores.charged > scoreBefore2 %} showElementsOfTube('-2'); {% endif %}
    {% else %}
        {% if run.score > minScore and
             run.score > scoreBefore %} showElementsOfTube(''); {% endif %}
    {% endif %}
    document.getElementById('newScoreStyle').style.color = '#888';
    animateNextStep();
}

function showElementsOfTube(id2String) {
    document.getElementById('glas-grey-2' + id2String).style.visibility = 'hidden';
    document.getElementById('glas-black-2' + id2String).style.visibility = 'visible';
    document.getElementById('fluid-2' + id2String).style.visibility = 'visible';
}

function animateNextStep() {
    if (animationStep > animationLength) {
        document.getElementById('newScoreStyle').style.color = '#000';
        return;
    }

    {% if run.group == 'notPolar' or run.group == 'polarCharged' or run.group == 'all' %}
        fill(2, 1);
        fill(2, 2);
        {% if run.group == 'all' %}
            fill(2, 3);
            fill(2, 4);
        {% endif %}
    {% else %}
        fill(2);
    {% endif %}

    animationStep++;
    setTimeout(function() { animateNextStep(); }, 20);
}

function fill(id, id2) {
    if (id === 1) {
        {% if run.group == 'notPolar' or run.group == 'polarCharged' or run.group == 'all' %}
            if (scoresFrom[id2 - 1] <= minScore) return;
        {% else %}
            if (scoreFrom <= minScore) return;
        {% endif %}
    }

    let id2String ='';
    if (typeof id2 !== 'undefined' && id2 >= 1 && id2 <= 4) id2String = '-' + id2;

    // Todo: This is currently executed two times in stead of one time as it should
    let score;
    if (id === 2 && scoreTo < scoreFrom) {
        score = scoreTo;
    } else {
        score = calculateScore(scoreFrom, scoreTo, animationStep, animationLength);
    }
    if (id === 2) document.getElementById('newScore').innerText = score;

    let from, to, newScore;
    {% if run.group == 'notPolar' or run.group == 'polarCharged' or run.group == 'all' %}
        from = scoresFrom[id2 - 1];
        to   = scoresTo  [id2 - 1];
    {% else %}
        from = scoreFrom;
        to   = scoreTo;
    {% endif %}
    if (id === 2 && scoreTo < scoreFrom) {
        newScore = to;
    } else if (id === 1) {
        newScore = from;
    } else {
        newScore = calculateScore(from, to, animationStep, animationLength);
    }

    {% if run.group == 'all' %}
        if (id === 1) {
            document.getElementById('fluid-' + id + '-1').setAttribute('d', getPath('nonPolar', newScore));
            document.getElementById('fluid-' + id + '-2').setAttribute('d', getPath('nonPolar', newScore, true));
            document.getElementById('fluid-' + id + '-3').setAttribute('d', getPath('polar', newScore));
            document.getElementById('fluid-' + id + '-4').setAttribute('d', getPath('charged', newScore));
        } else {
            if      (id2 === 1) document.getElementById('fluid-' + id + id2String).setAttribute('d', getPath('nonPolar', newScore));
            else if (id2 === 2) document.getElementById('fluid-' + id + id2String).setAttribute('d', getPath('nonPolar', newScore, true));
            else if (id2 === 3) document.getElementById('fluid-' + id + id2String).setAttribute('d', getPath('polar', newScore));
            else if (id2 === 4) document.getElementById('fluid-' + id + id2String).setAttribute('d', getPath('charged', newScore));
        }
    {% elseif run.group == 'polarCharged' %}
        if (id === 1) {
            document.getElementById('fluid-' + id + '-1').setAttribute('d', getPath('polar', newScore));
            document.getElementById('fluid-' + id + '-2').setAttribute('d', getPath('charged', newScore));
        } else {
            if      (id2 === 1) document.getElementById('fluid-' + id + id2String).setAttribute('d', getPath('polar', newScore));
            else if (id2 === 2) document.getElementById('fluid-' + id + id2String).setAttribute('d', getPath('charged', newScore));
        }
    {% else %}
        {% set group = 'nonPolar' %}
        {% if run.group == 'polar' %}
            {% set group = 'polar' %}
        {% elseif run.group == 'charged' or
            run.group == 'all' %}
            {% set group = 'charged' %}
        {% endif %}

        document.getElementById('fluid-' + id + id2String).setAttribute('d', getPath('{{ group }}', newScore
                {% if run.group == 'notPolar' %}, id2 === 2{% endif %}));
    {% endif %}
    if (newScore === 100) showReflexDelayed(id, id2);
}

function showReflexDelayed(id, id2) {
    let id2String ='';
    if (typeof id2 !== 'undefined' && id2 >= 1 && id2 <= 4) id2String = '-' + id2;

    setTimeout(function () {
        document.getElementById('reflex-' + id + id2String).style.visibility = 'visible';
        document.getElementById('reflex-' + id + id2String).style.opacity = '1';
    }, animationDelayInMsForReflex);
}

function calculateScore(scoreFrom, scoreTo, animationStep, animationTotal) {
    if (!animationStep > 0) return scoreFrom;
    let newScore = Math.floor(scoreFrom + ((scoreTo - scoreFrom) * (animationStep / animationTotal)));
    return Math.min(newScore, scoreTo)
}

function getPath(group, score, nonPolar2 = false) {
    if (group === 'nonPolar') {
        let x = (100 - score) / 100 * 74.56;
        let initialX = nonPolar2 ? 88.02 : 56.77;
        return 'm ' + initialX + ', ' + (x + 67.84) +
               'h -19.98' +
               'v ' + (74.56 - x) +
               'c 0, 5.51, 4.48, 9.99, 9.99, 9.99' +
               's 9.99-4.48, 9.99-9.99' +
               'v -' + (74.56 - x) +
               'Z';
    } else if (group === 'polar') {
        let g = '';
        if (score >= 85) {
            g = 'm 126.13, 95.95';
            g += 'c -.06 -.19 -.1 -.48 -.1 -.78';
            if (score > 85) g += 'v -' + (10.11 * ((score - 85) / 15));
            g += 'h -19.47';
            if (score > 85) g += 'v ' + (10.11 * ((score - 85) / 15));
            g += 'c 0, .3 -.04 .59 -.12 .88';
            g += 'l -10, 52.8';
            g += 'c -.16 .84 .06, 1.7 .61, 2.35';
            g += 's 1.35, 1.03, 2.2, 1.03';
            g += 'h 34.12';
            g += 'c .85, 0, 1.66 -.38, 2.2 -1.03';
            g += 's .77 -1.52 .61 -2.35';
            g += 'l -10 -52.8';
        } else {
            let x = score / 85;
            g ='m 96.4, 149.3';
            g += 'c -.16 .84 .06, 1.7 .61, 2.35';
            g += 's 1.35, 1.03, 2.2, 1.03';
            g += 'h 34.12';
            g += 'c .85, 0, 1.66 -.38, 2.2 -1.03';
            g += 's .77 -1.52 .61 -2.35';
            g += 'l -' + (10 * x) + ' -' + (52.8 * x);
            g += 'c -.06 -.19 -.1 -.48 -.1 -.78';
            g += 'h -' + (19.47 + 20 * (1 - x));
            g += 'c 0, .3 -.04 .59 -.12 .88';
        }
        g += 'Z';
        return g;
    } else if (group === 'charged') {
        let x = (1 - (score / 100)) * 45.5;
        return 'm 155.74, 152.14' +
               'h 14.36' +
               'c 6.32, 0, 11.46 -5.37, 11.46 -11.97' +
               'v -' + (45.5 - x) +
               'h -37.28' +
               'v ' + (45.5 - x) +
               'c 0, 6.6, 5.14, 11.97, 11.46, 11.97' +
               'Z';
    }
    return '';
}

document.addEventListener('DOMContentLoaded', function() {
    {% if run.group == 'notPolar' %}
        {% if scoreBefore1 > minScore %} fill(1, 1);{% endif %}
        {% if run.baseScores.nonPolar1 > minScore %}
            fill(2, 1);
            {% if run.baseScores.nonPolar1 > scoreBefore1 %}
                animationLength = Math.max({{ run.baseScores.nonPolar1 - scoreBefore1 }}, animationLength);
            {% endif %}
        {% endif %}

        {% if scoreBefore2 > minScore %} fill(1, 2);{% endif %}
        {% if run.baseScores.nonPolar2 > minScore %}
            fill(2, 2);
            {% if run.baseScores.nonPolar2 > scoreBefore2 %}
                animationLength = Math.max({{ run.baseScores.nonPolar2 - scoreBefore2 }}, animationLength);
            {% endif %}
        {% endif %}

    {% elseif run.group == 'polarCharged' %}
        {% if scoreBefore1 > minScore %} fill(1, 1);{% endif %}
        {% if run.baseScores.polar > minScore %}
            fill(2, 1);
            {% if run.baseScores.polar > scoreBefore1 %}
                animationLength = Math.max({{ run.baseScores.polar - scoreBefore1 }}, animationLength);
            {% endif %}
        {% endif %}

        {% if scoreBefore2 > minScore %} fill(1, 2);{% endif %}
        {% if run.baseScores.charged > minScore %}
            fill(2, 2);
            {% if run.baseScores.charged > scoreBefore2 %}
                animationLength = Math.max({{ run.baseScores.charged - scoreBefore2 }}, animationLength);
            {% endif %}
        {% endif %}

    {% else %}
        {% if scoreBefore > minScore %} fill(1); {% endif %}
        {% if run.score > minScore %}
            fill(2);
            {% if run.score > scoreBefore %}
                animationLength = {{ run.score - scoreBefore }};
            {% endif %}
        {% endif %}
    {% endif %}

    // wait before starting the animation
    if (animationLength > 0) {
        animationStep = 1;
        setTimeout(function () {
            startAnimation();
        }, animationDelayInMs);
    }
}, false);
